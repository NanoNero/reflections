What happens when you initialize a repository? Why do you need to do it?
A .git file is added to the directory.  This helps keep track of commits and which files have been changed.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area files cannot be accessed.  They are saved temporarily.  Files can be added and removed from it. It allows user to remove files if they aren't sure.

How can you use the staging area to make sure you have one commit per logical change?
Use git diff -staging and the command displays the differences in code so the last commited verison and the staged version.  That way you can make sure you have one commit per logical changing in the staging area.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
If I want to experiment with a new feature or logic, or add a new language.  Branches allow me to work on a code I'm not sure about without disturbing the code that works.  That way if the experiment goes wrong, the code that works hasn't been modified.

How do the diagrams help you visualize the branch structure?
They help understand the sequence of commits, the point up to which the code is the same and unreachable branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The code that is present in both branches is combined with the code that was added in both branches.  The previous fragments of code that were deleted from either branch are removed too. We represent it like that because the merged code has 2 parents since the code is a combined from lines written in both branches.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Git's merging does not merge code when there are conflicts, the users have to do it themselves.  However, git does show the users where the conflicts occurred, that way it's easier to debug.




